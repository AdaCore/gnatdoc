<CompilationUnit subprograms_gnat.ads:5:1-268:22>
<AdaNodeList subprograms_gnat.ads:5:1-5:17>
<WithClause subprograms_gnat.ads:5:1-5:17>
<LimitedAbsent subprograms_gnat.ads:5:1-5:1>
<PrivateAbsent subprograms_gnat.ads:5:1-5:1>
<NameList subprograms_gnat.ads:5:6-5:16>
<Id "Interfaces" subprograms_gnat.ads:5:6-5:16>
<LibraryItem subprograms_gnat.ads:7:1-268:22>
<PrivateAbsent subprograms_gnat.ads:5:17-5:17>
<PackageDecl ["Subprograms_GNAT"] subprograms_gnat.ads:7:1-268:22>
**************************
\/ RAW <<HEADER>> ()
\/ RAW <<LEADING>> ()
\/ RAW <<INTERMEDIATE UPPER>> ()
\/ RAW <<INTERMEDIATE UPPER>> ()
This is description of the package at the top of the specification.
\/ SNIPPET ada ()
package Subprograms_GNAT
\/ DESCRIPTION  ()
This is description of the package at the top of the specification.
**************************
<DefiningName "Subprograms_GNAT" subprograms_gnat.ads:7:9-7:25>
<Id "Subprograms_GNAT" subprograms_gnat.ads:7:9-7:25>
<PublicPart subprograms_gnat.ads:7:28-263:1>
<AdaNodeList subprograms_gnat.ads:9:4-257:20>
<PragmaNode subprograms_gnat.ads:9:4-9:24>
<Id "Preelaborate" subprograms_gnat.ads:9:11-9:23>
<BaseAssocList subprograms_gnat.ads:9:23-9:23>
<ConcreteTypeDecl ["Abstract_Type"] subprograms_gnat.ads:13:4-13:62>
**************************
\/ RAW <<LEADING>> ()
\/ RAW <<TRAILING>> ()
Abstract tagged type to test abstract subprograms.
\/ SNIPPET ada ()
type Abstract_Type is abstract tagged limited null record;
\/ DESCRIPTION  ()
Abstract tagged type to test abstract subprograms.
**************************
<SubpDecl ["Test_Procedure_Inline"] subprograms_gnat.ads:29:4-33:20>
**************************
\/ RAW <<CALLABLE>> ()
This is description of the procedure with "inline" parameter's
description.

@exception Constraint_Error Raised on some error condition.
\/ PARAMETER x (X)
Value of X

Values of X and Y
\/ PARAMETER y (Y)
Value of Y

Values of X and Y
\/ PARAMETER z (Z)
Value of Z
\/ SNIPPET ada ()
procedure Test_Procedure_Inline
  (X : Interfaces.Integer_64;
   Y : Interfaces.IEEE_Float_64;
   Z : Integer)
\/ DESCRIPTION  ()
This is description of the procedure with "inline" parameter's
description.
\/ RAISED_EXCEPTION constraint_error (Constraint_Error)
Raised on some error condition.
**************************
<SubpDecl ["Test_Procedure_Inline_Aspects"] subprograms_gnat.ads:39:4-43:32>
**************************
\/ RAW <<CALLABLE>> ()
This is description of the procedure with "inline" parameter's
description and aspects.
@exception Constraint_Error Raised on some error condition.
\/ PARAMETER x (X)
Value of X
\/ PARAMETER y (Y)
Value of Y
\/ PARAMETER z (Z)
Value of Z
\/ SNIPPET ada ()
procedure Test_Procedure_Inline_Aspects
  (X : Interfaces.Integer_64;
   Y : Interfaces.IEEE_Float_64;
   Z : Integer)
\/ DESCRIPTION  ()
This is description of the procedure with "inline" parameter's
description and aspects.
\/ RAISED_EXCEPTION constraint_error (Constraint_Error)
Raised on some error condition.
**************************
<SubpDecl ["Test_Procedure_Inline_Before_With_Aspects"] subprograms_gnat.ads:48:4-58:32>
**************************
\/ RAW <<CALLABLE>> ()
This is description of the procedure with "inline" parameter's
description and aspects.
@exception Constraint_Error Raised on some error condition.
\/ PARAMETER x (X)
Value of X
\/ PARAMETER y (Y)
Value of Y
\/ PARAMETER z (Z)
Value of Z
\/ SNIPPET ada ()
procedure Test_Procedure_Inline_Before_With_Aspects
  (X : Interfaces.Integer_64;
   Y : Interfaces.IEEE_Float_64;
   Z : Integer)
\/ DESCRIPTION  ()
This is description of the procedure with "inline" parameter's
description and aspects.
\/ RAISED_EXCEPTION constraint_error (Constraint_Error)
Raised on some error condition.
**************************
<SubpDecl ["Test_Procedure_Inline_Before_Aspects"] subprograms_gnat.ads:60:4-69:27>
**************************
\/ RAW <<CALLABLE>> ()
This is description of the procedure with "inline" parameter's
description and aspects.
@exception Constraint_Error Raised on some error condition.
\/ PARAMETER x (X)
Value of X
More about X
\/ PARAMETER y (Y)
Value of Y
More about Y
\/ PARAMETER z (Z)
Value of Z
\/ SNIPPET ada ()
procedure Test_Procedure_Inline_Before_Aspects
  (X : Interfaces.Integer_64;
   Y : Interfaces.IEEE_Float_64;
   Z : Integer)
\/ DESCRIPTION  ()
This is description of the procedure with "inline" parameter's
description and aspects.
\/ RAISED_EXCEPTION constraint_error (Constraint_Error)
Raised on some error condition.
**************************
<SubpDecl ["Test_Procedure"] subprograms_gnat.ads:71:4-73:22>
**************************
\/ RAW <<CALLABLE>> ()
This is description of the procedure with description of the
parameters in comment block.
@param A Value of A
@param B Value of B
\/ PARAMETER a (A)
Value of A
\/ PARAMETER b (B)
Value of B
\/ SNIPPET ada ()
procedure Test_Procedure
  (A : String;
   B : Character)
\/ DESCRIPTION  ()
This is description of the procedure with description of the
parameters in comment block.
**************************
<SubpDecl ["Test_Procedure_Multiple_Parameters"] subprograms_gnat.ads:79:4-81:28>
**************************
\/ RAW <<CALLABLE>> ()
This is description of the procedure with description of the
parameters in comment block.
@param A Value of A
@param D Value of D
\/ PARAMETER a (A)
Values of strings

Value of A
\/ PARAMETER b (B)
Values of strings
\/ PARAMETER c (C)
Values of strings
\/ PARAMETER d (D)
Value of D
\/ SNIPPET ada ()
procedure Test_Procedure_Multiple_Parameters
  (A, B, C : String;
   D       : Character)
\/ DESCRIPTION  ()
This is description of the procedure with description of the
parameters in comment block.
**************************
<SubpDecl ["Test_Procedure_Grouped_Parameters"] subprograms_gnat.ads:87:4-93:22>
**************************
\/ RAW <<CALLABLE>> ()
This is description of the procedure with description of the
parameters in comment block.
@param A Value of A
@param D Value of D
\/ PARAMETER a (A)
Values of strings

Value of A
\/ PARAMETER b (B)
Value of B

Values of strings
\/ PARAMETER c (C)
Values of strings
\/ PARAMETER d (D)
Value of D
\/ SNIPPET ada ()
procedure Test_Procedure_Grouped_Parameters
  (A : String;
   B : String;
   C : String;
   D : Character)
\/ DESCRIPTION  ()
This is description of the procedure with description of the
parameters in comment block.
**************************
<SubpDecl ["Test_Procedure_Multiline_Parameters"] subprograms_gnat.ads:99:4-105:22>
**************************
\/ RAW <<CALLABLE>> ()
This is description of the procedure with description of the
parameters in comment block.
@param A And even more about A.
@param D Value of D
\/ PARAMETER a (A)
Value of A

As well as more information about A.

And even more about A.
\/ PARAMETER b (B)
Value of B

As well as more information about B and C.
\/ PARAMETER c (C)
Value of C

As well as more information about B and C.
\/ PARAMETER d (D)
Value of D
\/ SNIPPET ada ()
procedure Test_Procedure_Multiline_Parameters
  (A : String;
   B : String;
   C : String;
   D : Character)
\/ DESCRIPTION  ()
This is description of the procedure with description of the
parameters in comment block.
**************************
<SubpDecl ["Test_Single_Line"] subprograms_gnat.ads:111:4-111:31>
**************************
\/ RAW <<CALLABLE>> ()
This is single line comment for subprogram
\/ SNIPPET ada ()
procedure Test_Single_Line
\/ DESCRIPTION  ()
This is single line comment for subprogram
**************************
<SubpDecl ["Test"] subprograms_gnat.ads:113:4-113:33>
**************************
\/ RAW <<CALLABLE>> ()
Procedure with parameter.
\/ PARAMETER x (X)
\/ SNIPPET ada ()
procedure Test (X : Integer)
\/ DESCRIPTION  ()
Procedure with parameter.
**************************
<SubpDecl ["Test"] subprograms_gnat.ads:124:4-124:60>
**************************
\/ RAW <<CALLABLE>> ()
Function with two parameters

@param X Value of X
@param Y Value of Y
@return Return value
\/ PARAMETER x (X)
Value of X
\/ PARAMETER y (Y)
Value of Y
\/ RETURNS  ()
Return value
\/ SNIPPET ada ()
function Test (X : Integer; Y : Integer) return Integer
\/ DESCRIPTION  ()
Function with two parameters
**************************
<SubpDecl ["Test_2"] subprograms_gnat.ads:131:4-133:16>
**************************
\/ RAW <<CALLABLE>> ()
Function with two parameters

@param X Value of X
@param Y Value of Y
\/ PARAMETER x (X)
Value of X
\/ PARAMETER y (Y)
Value of Y
\/ RETURNS  ()
Multiline inlined description
of the return value.
\/ SNIPPET ada ()
function Test_2 (X : Integer; Y : Integer)
  return
    Integer
\/ DESCRIPTION  ()
Function with two parameters
**************************
<SubpDecl ["Test_3"] subprograms_gnat.ads:139:4-140:21>
**************************
\/ RAW <<CALLABLE>> ()
Function without parameters
\/ RETURNS  ()
Multiline inlined description
of the return value.
\/ SNIPPET ada ()
function Test_3
  return Integer
\/ DESCRIPTION  ()
Function without parameters
**************************
<SubpDecl ["Test_Aspects_1"] subprograms_gnat.ads:144:4-144:55>
**************************
\/ RAW <<CALLABLE>> ()
Parameterless single line function declaration.
\/ RETURNS  ()
\/ SNIPPET ada ()
function Test_Aspects_1 return Integer
\/ DESCRIPTION  ()
Parameterless single line function declaration.
**************************
<SubpDecl ["Test_Aspects_2"] subprograms_gnat.ads:147:4-149:18>
**************************
\/ RAW <<CALLABLE>> ()
Parameterless single line function declaration.
\/ RETURNS  ()
\/ SNIPPET ada ()
function Test_Aspects_2 return Integer
\/ DESCRIPTION  ()
Parameterless single line function declaration.
**************************
<SubpDecl ["Test_Aspects_3"] subprograms_gnat.ads:151:4-153:24>
**************************
\/ RAW <<CALLABLE>> ()
Parameterless single line function declaration.
\/ RETURNS  ()
\/ SNIPPET ada ()
function Test_Aspects_3 return Integer
\/ DESCRIPTION  ()
Parameterless single line function declaration.
**************************
<SubpDecl ["Test_Aspects_4"] subprograms_gnat.ads:155:4-158:24>
**************************
\/ RAW <<CALLABLE>> ()
Parameterless single line function declaration.
\/ RETURNS  ()
Retun value is always positive
\/ SNIPPET ada ()
function Test_Aspects_4
  return Integer
\/ DESCRIPTION  ()
Parameterless single line function declaration.
**************************
<NullSubpDecl ["Test_Null"] subprograms_gnat.ads:164:4-164:32>
**************************
\/ RAW <<CALLABLE>> ()
Parameterless null subprogram.
\/ SNIPPET ada ()
procedure Test_Null
\/ DESCRIPTION  ()
Parameterless null subprogram.
**************************
<AbstractSubpDecl ["Test_Abstract"] subprograms_gnat.ads:167:4-167:63>
**************************
\/ RAW <<CALLABLE>> ()
Abstract procedure.
\/ PARAMETER self (Self)
\/ SNIPPET ada ()
procedure Test_Abstract (Self : Abstract_Type)
\/ DESCRIPTION  ()
Abstract procedure.
**************************
<AbstractSubpDecl ["Test_Abstract"] subprograms_gnat.ads:170:4-170:77>
**************************
\/ RAW <<CALLABLE>> ()
Abstract function.
\/ PARAMETER self (Self)
\/ RETURNS  ()
\/ SNIPPET ada ()
function Test_Abstract (Self : Abstract_Type) return Boolean
\/ DESCRIPTION  ()
Abstract function.
**************************
<ExprFunction ["Test_Expression_1"] subprograms_gnat.ads:173:4-173:53>
**************************
\/ RAW <<CALLABLE>> ()
Expression function.
\/ RETURNS  ()
\/ SNIPPET ada ()
function Test_Expression_1 return Integer
\/ DESCRIPTION  ()
Expression function.
**************************
<ExprFunction ["Test_Expression_2"] subprograms_gnat.ads:176:4-179:15>
**************************
\/ RAW <<CALLABLE>> ()
Multiline expression function, documentation before expression.
\/ RETURNS  ()
\/ SNIPPET ada ()
function Test_Expression_2
  return Integer
\/ DESCRIPTION  ()
Multiline expression function, documentation before expression.
**************************
<ExprFunction ["Test_Expression_3"] subprograms_gnat.ads:181:4-186:20>
**************************
\/ RAW <<CALLABLE>> ()
Multiline expression function, documentation before expression, aspects
present.
\/ RETURNS  ()
\/ SNIPPET ada ()
function Test_Expression_3
  return Integer
\/ DESCRIPTION  ()
Multiline expression function, documentation before expression, aspects
present.
**************************
<ExprFunction ["Test_Expression_4"] subprograms_gnat.ads:188:4-193:18>
**************************
\/ RAW <<CALLABLE>> ()
Multiline expression function, documentation after expression, aspects
present.
\/ RETURNS  ()
\/ SNIPPET ada ()
function Test_Expression_4
  return Integer
\/ DESCRIPTION  ()
Multiline expression function, documentation after expression, aspects
present.
**************************
<SubpDecl ["Test_Procedure_With_Pragma"] subprograms_gnat.ads:195:4-195:41>
**************************
\/ RAW <<CALLABLE>> ()
Documentation of the procedure with applied pragma.
\/ SNIPPET ada ()
procedure Test_Procedure_With_Pragma
\/ DESCRIPTION  ()
Documentation of the procedure with applied pragma.
**************************
<PragmaNode subprograms_gnat.ads:196:4-196:47>
<Id "Inline" subprograms_gnat.ads:196:11-196:17>
<BaseAssocList subprograms_gnat.ads:196:19-196:45>
<PragmaArgumentAssoc subprograms_gnat.ads:196:19-196:45>
<Id "Test_Procedure_With_Pragma" subprograms_gnat.ads:196:19-196:45>
<SubpDecl ["Test_With_Anonymous_Access_To_Subprogram_Parameter"] subprograms_gnat.ads:199:4-200:52>
**************************
\/ RAW <<CALLABLE>> ()
Documentation of subprogram with parameter of anonymous access to
subprogram type.
\/ PARAMETER s (S)
Callback subprogram.
\/ SNIPPET ada ()
procedure Test_With_Anonymous_Access_To_Subprogram_Parameter
  (S : not null access procedure (X : Integer))
\/ DESCRIPTION  ()
Documentation of subprogram with parameter of anonymous access to
subprogram type.
**************************
<ConcreteTypeDecl ["Access_Procedure_1"] subprograms_gnat.ads:204:4-204:48>
**************************
\/ RAW <<CALLABLE>> ()
Access to parameterless procedure.
\/ SNIPPET ada ()
type Access_Procedure_1 is access procedure;
\/ DESCRIPTION  ()
Access to parameterless procedure.
**************************
<ConcreteTypeDecl ["Access_Procedure_2"] subprograms_gnat.ads:207:4-208:37>
**************************
\/ RAW <<CALLABLE>> ()
Access to procedure.
\/ PARAMETER x (X)
Value of X
\/ SNIPPET ada ()
type Access_Procedure_2 is
  access procedure (X : Integer);
\/ DESCRIPTION  ()
Access to procedure.
**************************
<ConcreteTypeDecl ["Access_Procedure_3"] subprograms_gnat.ads:211:4-211:65>
**************************
\/ RAW <<CALLABLE>> ()
Access to procedure with two parameters.

@param X Value of X
@param Y Value of Y
\/ PARAMETER x (X)
Value of X
\/ PARAMETER y (Y)
Value of Y
\/ SNIPPET ada ()
type Access_Procedure_3 is access procedure (X, Y : Integer);
\/ DESCRIPTION  ()
Access to procedure with two parameters.
**************************
<ConcreteTypeDecl ["Access_Function_1"] subprograms_gnat.ads:217:4-218:37>
**************************
\/ RAW <<CALLABLE>> ()
Access to parameterless function.
\/ RETURNS  ()
Return value
\/ SNIPPET ada ()
type Access_Function_1 is
  access function return Integer;
\/ DESCRIPTION  ()
Access to parameterless function.
**************************
<ConcreteTypeDecl ["Access_Function_2"] subprograms_gnat.ads:221:4-222:49>
**************************
\/ RAW <<CALLABLE>> ()
Access to function

@param X Value of X
@return Return value
\/ PARAMETER x (X)
Value of X
\/ RETURNS  ()
Return value
\/ SNIPPET ada ()
type Access_Function_2 is
  access function (X : Float) return Integer;
\/ DESCRIPTION  ()
Access to function
**************************
<SubpDecl ["Test_VC20_013_Baz3"] subprograms_gnat.ads:232:4-236:22>
**************************
\/ RAW <<CALLABLE>> ()
Text 1
@return Text 3
\/ PARAMETER arg (Arg)
Text 2
\/ RETURNS  ()
Text 3
\/ SNIPPET ada ()
function Test_VC20_013_Baz3
   (Arg : Integer
   )
   return Integer
\/ DESCRIPTION  ()
Text 1
**************************
<SubpDecl ["Baz_CS0038741"] subprograms_gnat.ads:244:4-249:8>
**************************
\/ RAW <<CALLABLE>> ()
Baz
\/ PARAMETER x (X)
X
\/ PARAMETER y (Y)
Y
\/ SNIPPET ada ()
procedure Baz_CS0038741
  (X : Integer;
   Y : Integer
  )
\/ DESCRIPTION  ()
Baz
**************************
<SubpDecl ["Test_Procedure_With_Broken_Comments"] subprograms_gnat.ads:256:4-257:20>
**************************
\/ RAW <<CALLABLE>> ()
Documentation of the subprogram.
\/ PARAMETER x (X)
\/ SNIPPET ada ()
procedure Test_Procedure_With_Broken_Comments
  (X : Integer)
\/ DESCRIPTION  ()
Documentation of the subprogram.
**************************
<PrivatePart subprograms_gnat.ads:263:8-268:1>
<AdaNodeList subprograms_gnat.ads:263:8-263:8>
<EndName subprograms_gnat.ads:268:5-268:21>
<Id "Subprograms_GNAT" subprograms_gnat.ads:268:5-268:21>
<PragmaNodeList subprograms_gnat.ads:268:22-268:22>
<CompilationUnit monitor_loop.ads:7:1-7:45>
<AdaNodeList monitor_loop.ads:7:1-7:1>
<LibraryItem monitor_loop.ads:7:1-7:45>
<PrivateAbsent monitor_loop.ads:7:1-7:1>
<SubpDecl ["Monitor_Loop"] monitor_loop.ads:7:1-7:45>
**************************
\/ RAW <<CALLABLE>> ()
Drive process control engine, deliver events, watch child processes, etc.

Timeout to run. Don't wait if zero. If there are some events then procedure
will return before timeout expires.

Note: This procedure is NOT thread-safe! In multi-tasking environment
create a dedicated task to drive the engine.

In single task application you should call this to drive process engine.

In Glib enabled application the engine is integrated it the Glib event
loop and this procedure shouldn't be used.
\/ PARAMETER timeout (Timeout)
\/ SNIPPET ada ()
procedure Monitor_Loop (Timeout : Duration)
\/ DESCRIPTION  ()
Drive process control engine, deliver events, watch child processes, etc.

Timeout to run. Don't wait if zero. If there are some events then procedure
will return before timeout expires.

Note: This procedure is NOT thread-safe! In multi-tasking environment
create a dedicated task to drive the engine.

In single task application you should call this to drive process engine.

In Glib enabled application the engine is integrated it the Glib event
loop and this procedure shouldn't be used.
**************************
<PragmaNodeList monitor_loop.ads:7:45-7:45>
