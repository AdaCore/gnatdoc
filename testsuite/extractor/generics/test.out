<CompilationUnit generics.ads:4:1-147:14>
<AdaNodeList generics.ads:4:1-4:1>
<LibraryItem generics.ads:4:1-147:14>
<PrivateAbsent generics.ads:4:1-4:1>
<PackageDecl ["Generics"] generics.ads:4:1-147:14>
**************************
\/ RAW <<LEADING>> ()
Test cases for generics declarations
\/ RAW <<INTERMEDIATE UPPER>> ()
This generic package has set of formal parameters of all types.
\/ SNIPPET ada ()
package Generics
\/ DESCRIPTION  ()
This generic package has set of formal parameters of all types.
**************************
<DefiningName "Generics" generics.ads:4:9-4:17>
<Id "Generics" generics.ads:4:9-4:17>
<PublicPart generics.ads:4:20-147:1>
<AdaNodeList generics.ads:8:4-145:24>
<GenericPackageDecl ["All_Types"] generics.ads:8:4-50:18>
**************************
\/ FORMAL private_type (Private_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the formal private type.
  \/ SNIPPET ada ()
type Private_Type is abstract tagged limited private;
  \/ DESCRIPTION  ()
Description of the formal private type.
\/ FORMAL derived_type (Derived_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the formal derived type.
  \/ SNIPPET ada ()
type Derived_Type is abstract limited new Private_Type with private;
  \/ DESCRIPTION  ()
Description of the formal derived type.
\/ FORMAL discrete_type (Discrete_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the formal discrete type.
  \/ SNIPPET ada ()
type Discrete_Type is (<>);
  \/ DESCRIPTION  ()
Description of the formal discrete type.
\/ FORMAL signed_integer_type (Signed_Integer_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the formal signed integer type.
  \/ SNIPPET ada ()
type Signed_Integer_Type is range <>;
  \/ DESCRIPTION  ()
Description of the formal signed integer type.
\/ FORMAL modular_type (Modular_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the formal modular type.
  \/ SNIPPET ada ()
type Modular_Type is mod <>;
  \/ DESCRIPTION  ()
Description of the formal modular type.
\/ FORMAL floating_point_type (Floating_Point_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the formal floating point type.
  \/ SNIPPET ada ()
type Floating_Point_Type is digits <>;
  \/ DESCRIPTION  ()
Description of the formal floating point type.
\/ FORMAL ordinary_fixed_point_type (Ordinary_Fixed_Point_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the ordinary fixed point type.
  \/ SNIPPET ada ()
type Ordinary_Fixed_Point_Type is delta <>;
  \/ DESCRIPTION  ()
Description of the ordinary fixed point type.
\/ FORMAL decimal_fixed_point_type (Decimal_Fixed_Point_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the decimal fixed point type.
  \/ SNIPPET ada ()
type Decimal_Fixed_Point_Type is delta <> digits <>;
  \/ DESCRIPTION  ()
Description of the decimal fixed point type.
\/ FORMAL array_type (Array_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the array type.
  \/ SNIPPET ada ()
type Array_Type is array (Signed_Integer_Type range <>) of Modular_Type;
  \/ DESCRIPTION  ()
Description of the array type.
\/ FORMAL object_access_type (Object_Access_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the object access type.
  \/ SNIPPET ada ()
type Object_Access_Type is access all Derived_Type'Class;
  \/ DESCRIPTION  ()
Description of the object access type.
\/ FORMAL procedure_access_type (Procedure_Access_Type)
  \/ RAW <<CALLABLE>> ()
Description of the access to parameterless procedure type.
  \/ SNIPPET ada ()
procedure
  \/ DESCRIPTION  ()
Description of the access to parameterless procedure type.
\/ FORMAL function_access_type (Function_Access_Type)
  \/ RAW <<CALLABLE>> ()
Description of the access to parameterless function type.
  \/ RETURNS  ()
  \/ SNIPPET ada ()
function return Floating_Point_Type
  \/ DESCRIPTION  ()
Description of the access to parameterless function type.
\/ FORMAL interface_type (Interface_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the interface type.
  \/ SNIPPET ada ()
type Interface_Type is synchronized interface;
  \/ DESCRIPTION  ()
Description of the interface type.
\/ RAW <<LEADING>> ()
This generic package has set of formal parameters of all types.
\/ RAW <<INTERMEDIATE UPPER>> ()
\/ SNIPPET ada ()
generic
   type Private_Type is abstract tagged limited private;
   type Derived_Type is abstract limited new Private_Type with private;
   type Discrete_Type is (<>);
   type Signed_Integer_Type is range <>;
   type Modular_Type is mod <>;
   type Floating_Point_Type is digits <>;
   type Ordinary_Fixed_Point_Type is delta <>;
   type Decimal_Fixed_Point_Type is delta <> digits <>;
   type Array_Type is array (Signed_Integer_Type range <>) of Modular_Type;
   type Object_Access_Type is access all Derived_Type'Class;
   type Procedure_Access_Type is access procedure;
   type Function_Access_Type is access function return Floating_Point_Type;
   type Interface_Type is synchronized interface;
package All_Types
\/ DESCRIPTION  ()
This generic package has set of formal parameters of all types.
**************************
<GenericFormalPart generics.ads:8:4-45:53>
<GenericPackageInternal ["All_Types"] generics.ads:48:4-50:18>
<DefiningName "All_Types" generics.ads:48:12-48:21>
<Id "All_Types" generics.ads:48:12-48:21>
<PublicPart generics.ads:48:24-50:4>
<AdaNodeList generics.ads:48:24-48:24>
<EndName generics.ads:50:8-50:17>
<Id "All_Types" generics.ads:50:8-50:17>
<GenericPackageDecl ["All_Subprograms"] generics.ads:60:4-82:24>
**************************
\/ FORMAL procedure_access_type (Procedure_Access_Type)
Access to procedure
  \/ RAW <<CALLABLE>> ()
  \/ PARAMETER x (X)
Value of X
  \/ PARAMETER y (Y)
Value of Y
  \/ SNIPPET ada ()
procedure
(X : Integer;
Y : Integer)
  \/ DESCRIPTION  ()
\/ FORMAL function_access_type (Function_Access_Type)
Access to function
  \/ RAW <<CALLABLE>> ()
  \/ PARAMETER x (X)
Value of X
  \/ PARAMETER y (Y)
Value of Y
  \/ RETURNS  ()
Return value
  \/ SNIPPET ada ()
function
(X : Integer;
Y : Integer)
return Integer
  \/ DESCRIPTION  ()
\/ FORMAL procedure_p (Procedure_P)
Formal procedure
  \/ RAW <<CALLABLE>> ()
  \/ PARAMETER x (X)
Value of X
  \/ PARAMETER y (Y)
Value of Y
  \/ SNIPPET ada ()
procedure Procedure_P
(X : Integer;
Y : Integer)
  \/ DESCRIPTION  ()
\/ FORMAL function_f (Function_F)
Formal function
  \/ RAW <<CALLABLE>> ()
  \/ PARAMETER x (X)
Value of X
  \/ PARAMETER y (Y)
Value of Y
  \/ RETURNS  ()
Return value
  \/ SNIPPET ada ()
function Function_F
(X : Integer;
Y : Integer)
return Integer
  \/ DESCRIPTION  ()
\/ RAW <<LEADING>> ()
This generic package has set of formal parameters of access to
subprogram and subprogram.

@formal Procedure_Access_Type Access to procedure
@formal Function_Access_Type Access to function
@formal Procedure_P Formal procedure
@formal Function_F Formal function
\/ RAW <<INTERMEDIATE UPPER>> ()
\/ SNIPPET ada ()
generic
   type Procedure_Access_Type is access procedure
     (X : Integer;
      Y : Integer);
   type Function_Access_Type is access function
     (X : Integer;
      Y : Integer)
      return Integer;
   with procedure Procedure_P
     (X : Integer;
      Y : Integer);
   with function Function_F
     (X : Integer;
      Y : Integer)
      return Integer;
package All_Subprograms
\/ DESCRIPTION  ()
This generic package has set of formal parameters of access to
subprogram and subprogram.
**************************
<GenericFormalPart generics.ads:60:4-78:25>
<GenericPackageInternal ["All_Subprograms"] generics.ads:80:4-82:24>
<DefiningName "All_Subprograms" generics.ads:80:12-80:27>
<Id "All_Subprograms" generics.ads:80:12-80:27>
<PublicPart generics.ads:80:30-82:4>
<AdaNodeList generics.ads:80:30-80:30>
<EndName generics.ads:82:8-82:23>
<Id "All_Subprograms" generics.ads:82:8-82:23>
<GenericPackageDecl ["Objects"] generics.ads:86:4-95:16>
**************************
\/ FORMAL x (X)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the X and Y formal objects.
  \/ SNIPPET ada ()
X, Y : Integer;
  \/ DESCRIPTION  ()
Description of the X and Y formal objects.
\/ FORMAL y (Y)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the X and Y formal objects.
  \/ SNIPPET ada ()
X, Y : Integer;
  \/ DESCRIPTION  ()
Description of the X and Y formal objects.
\/ FORMAL z (Z)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the Z formal object.
  \/ SNIPPET ada ()
Z : Integer;
  \/ DESCRIPTION  ()
Description of the Z formal object.
\/ RAW <<LEADING>> ()
Formal objects
\/ RAW <<INTERMEDIATE UPPER>> ()
\/ SNIPPET ada ()
generic
   X, Y : Integer;
   Z : Integer;
package Objects
\/ DESCRIPTION  ()
Formal objects
**************************
<GenericFormalPart generics.ads:86:4-90:19>
<GenericPackageInternal ["Objects"] generics.ads:93:4-95:16>
<DefiningName "Objects" generics.ads:93:12-93:19>
<Id "Objects" generics.ads:93:12-93:19>
<PublicPart generics.ads:93:22-95:4>
<AdaNodeList generics.ads:93:22-93:22>
<EndName generics.ads:95:8-95:15>
<Id "Objects" generics.ads:95:8-95:15>
<GenericPackageDecl ["My_Types"] generics.ads:97:4-102:17>
**************************
\/ FORMAL types (Types)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
  \/ SNIPPET ada ()
with package Types is new All_Types (<>);
  \/ DESCRIPTION  ()
\/ RAW <<LEADING>> ()
\/ RAW <<INTERMEDIATE UPPER>> ()
\/ SNIPPET ada ()
generic
   with package Types is new All_Types (<>);
package My_Types
\/ DESCRIPTION  ()
**************************
<GenericFormalPart generics.ads:97:4-98:48>
<GenericPackageInternal ["My_Types"] generics.ads:100:4-102:17>
<DefiningName "My_Types" generics.ads:100:12-100:20>
<Id "My_Types" generics.ads:100:12-100:20>
<PublicPart generics.ads:100:23-102:4>
<AdaNodeList generics.ads:100:23-100:23>
<EndName generics.ads:102:8-102:16>
<Id "My_Types" generics.ads:102:8-102:16>
<GenericSubpDecl ["Generic_Procedure"] generics.ads:106:4-110:40>
**************************
\/ FORMAL t (T)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
Description of the formal parameter.
  \/ SNIPPET ada ()
type T is private;
  \/ DESCRIPTION  ()
Description of the formal parameter.
\/ RAW <<CALLABLE>> ()
Description of the generic procedure
\/ PARAMETER x (X)
\/ SNIPPET ada ()
generic
   type T is private;
procedure Generic_Procedure (X : T)
\/ DESCRIPTION  ()
Description of the generic procedure
**************************
<GenericFormalPart generics.ads:106:4-107:25>
<GenericSubpInternal ["Generic_Procedure"] generics.ads:110:4-110:39>
<SubpSpec generics.ads:110:4-110:39>
<SubpKindProcedure generics.ads:110:4-110:13>
<DefiningName "Generic_Procedure" generics.ads:110:14-110:31>
<Id "Generic_Procedure" generics.ads:110:14-110:31>
<Params generics.ads:110:32-110:39>
<ParamSpecList generics.ads:110:33-110:38>
<ParamSpec ["X"] generics.ads:110:33-110:38>
<DefiningNameList generics.ads:110:33-110:34>
<DefiningName "X" generics.ads:110:33-110:34>
<Id "X" generics.ads:110:33-110:34>
<AliasedAbsent generics.ads:110:36-110:36>
<ModeDefault generics.ads:110:36-110:36>
<SubtypeIndication generics.ads:110:37-110:38>
<NotNullAbsent generics.ads:110:36-110:36>
<Id "T" generics.ads:110:37-110:38>
<GenericSubpDecl ["Generic_Function"] generics.ads:115:4-118:47>
**************************
\/ FORMAL t (T)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
  \/ SNIPPET ada ()
type T is private;
  \/ DESCRIPTION  ()
\/ RAW <<CALLABLE>> ()
Description of the generic function

@param X Description of the parameter
@returns Description of the return value

@formal T Description of the formal type
\/ PARAMETER x (X)
Description of the parameter
\/ RETURNS  ()
s Description of the return value

@formal T Description of the formal type
\/ SNIPPET ada ()
generic
   type T is private;
function Generic_Function (X : T) return T
\/ DESCRIPTION  ()
Description of the generic function
**************************
<GenericFormalPart generics.ads:115:4-116:25>
<GenericSubpInternal ["Generic_Function"] generics.ads:118:4-118:46>
<SubpSpec generics.ads:118:4-118:46>
<SubpKindFunction generics.ads:118:4-118:12>
<DefiningName "Generic_Function" generics.ads:118:13-118:29>
<Id "Generic_Function" generics.ads:118:13-118:29>
<Params generics.ads:118:30-118:37>
<ParamSpecList generics.ads:118:31-118:36>
<ParamSpec ["X"] generics.ads:118:31-118:36>
<DefiningNameList generics.ads:118:31-118:32>
<DefiningName "X" generics.ads:118:31-118:32>
<Id "X" generics.ads:118:31-118:32>
<AliasedAbsent generics.ads:118:34-118:34>
<ModeDefault generics.ads:118:34-118:34>
<SubtypeIndication generics.ads:118:35-118:36>
<NotNullAbsent generics.ads:118:34-118:34>
<Id "T" generics.ads:118:35-118:36>
<SubtypeIndication generics.ads:118:45-118:46>
<NotNullAbsent generics.ads:118:44-118:44>
<Id "T" generics.ads:118:45-118:46>
<GenericPackageDecl ["Discriminanted_Types"] generics.ads:126:4-133:29>
**************************
\/ FORMAL private_unknown_discriminants_type (Private_Unknown_Discriminants_Type)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
  \/ SNIPPET ada ()
type Private_Unknown_Discriminants_Type (<>) is private;
  \/ DESCRIPTION  ()
\/ FORMAL private_known_discriminants_type (Private_Known_Discriminants_Type)
  \/ FIELD x (X)  129 129 130 128
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
  \/ SNIPPET ada ()
type Private_Known_Discriminants_Type (X : Integer) is private;
  \/ DESCRIPTION  ()
\/ RAW <<LEADING>> ()
\/ RAW <<INTERMEDIATE UPPER>> ()
\/ SNIPPET ada ()
generic
   type Private_Unknown_Discriminants_Type (<>) is private;
   type Private_Known_Discriminants_Type (X : Integer) is private;
package Discriminanted_Types
\/ DESCRIPTION  ()
**************************
<GenericFormalPart generics.ads:126:4-129:70>
<GenericPackageInternal ["Discriminanted_Types"] generics.ads:131:4-133:29>
<DefiningName "Discriminanted_Types" generics.ads:131:12-131:32>
<Id "Discriminanted_Types" generics.ads:131:12-131:32>
<PublicPart generics.ads:131:35-133:4>
<AdaNodeList generics.ads:131:35-131:35>
<EndName generics.ads:133:8-133:28>
<Id "Discriminanted_Types" generics.ads:133:8-133:28>
<GenericPackageDecl ["Incomplete_Type"] generics.ads:138:4-145:24>
**************************
\/ FORMAL cursor (Cursor)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
  \/ SNIPPET ada ()
type Cursor;
  \/ DESCRIPTION  ()
\/ FORMAL has_element (Has_Element)
  \/ RAW <<CALLABLE>> ()
  \/ PARAMETER self (Self)
  \/ RETURNS  ()
  \/ SNIPPET ada ()
function Has_Element (Self : Cursor) return Boolean
  \/ DESCRIPTION  ()
\/ RAW <<LEADING>> ()
Generic package with incomplete formal type declaration and use of
pragma in formal part.
\/ RAW <<INTERMEDIATE UPPER>> ()
\/ SNIPPET ada ()
generic
   type Cursor;
   with function Has_Element (Self : Cursor) return Boolean;
   pragma Unreferenced (Has_Element);
package Incomplete_Type
\/ DESCRIPTION  ()
Generic package with incomplete formal type declaration and use of
pragma in formal part.
**************************
<GenericFormalPart generics.ads:138:4-141:41>
<GenericPackageInternal ["Incomplete_Type"] generics.ads:143:4-145:24>
<DefiningName "Incomplete_Type" generics.ads:143:12-143:27>
<Id "Incomplete_Type" generics.ads:143:12-143:27>
<PublicPart generics.ads:143:30-145:4>
<AdaNodeList generics.ads:143:30-143:30>
<EndName generics.ads:145:8-145:23>
<Id "Incomplete_Type" generics.ads:145:8-145:23>
<EndName generics.ads:147:5-147:13>
<Id "Generics" generics.ads:147:5-147:13>
<PragmaNodeList generics.ads:147:14-147:14>
<CompilationUnit unchecked_conversion.ads:6:1-14:49>
<AdaNodeList unchecked_conversion.ads:6:1-6:1>
<LibraryItem unchecked_conversion.ads:6:1-10:58>
<PrivateAbsent unchecked_conversion.ads:6:1-6:1>
<GenericSubpDecl ["Unchecked_Conversion"] unchecked_conversion.ads:6:1-10:58>
**************************
\/ FORMAL source (Source)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
  \/ SNIPPET ada ()
type Source (<>) is limited private;
  \/ DESCRIPTION  ()
\/ FORMAL target (Target)
  \/ RAW <<LEADING>> ()
  \/ RAW <<TRAILING>> ()
  \/ SNIPPET ada ()
type Target (<>) is limited private;
  \/ DESCRIPTION  ()
\/ RAW <<CALLABLE>> ()
\/ PARAMETER s (S)
\/ RETURNS  ()
\/ SNIPPET ada ()
generic
   type Source (<>) is limited private;
   type Target (<>) is limited private;
function Unchecked_Conversion (S : Source) return Target
\/ RAW <<LEADING>> ()
An unchecked type conversion can be achieved by a call to an instance of
the generic function Unchecked_Conversion.
\/ DESCRIPTION  ()
An unchecked type conversion can be achieved by a call to an instance of
the generic function Unchecked_Conversion.
**************************
<GenericFormalPart unchecked_conversion.ads:6:1-8:40>
<GenericSubpInternal ["Unchecked_Conversion"] unchecked_conversion.ads:10:1-10:57>
<SubpSpec unchecked_conversion.ads:10:1-10:57>
<SubpKindFunction unchecked_conversion.ads:10:1-10:9>
<DefiningName "Unchecked_Conversion" unchecked_conversion.ads:10:10-10:30>
<Id "Unchecked_Conversion" unchecked_conversion.ads:10:10-10:30>
<Params unchecked_conversion.ads:10:31-10:43>
<ParamSpecList unchecked_conversion.ads:10:32-10:42>
<ParamSpec ["S"] unchecked_conversion.ads:10:32-10:42>
<DefiningNameList unchecked_conversion.ads:10:32-10:33>
<DefiningName "S" unchecked_conversion.ads:10:32-10:33>
<Id "S" unchecked_conversion.ads:10:32-10:33>
<AliasedAbsent unchecked_conversion.ads:10:35-10:35>
<ModeDefault unchecked_conversion.ads:10:35-10:35>
<SubtypeIndication unchecked_conversion.ads:10:36-10:42>
<NotNullAbsent unchecked_conversion.ads:10:35-10:35>
<Id "Source" unchecked_conversion.ads:10:36-10:42>
<SubtypeIndication unchecked_conversion.ads:10:51-10:57>
<NotNullAbsent unchecked_conversion.ads:10:50-10:50>
<Id "Target" unchecked_conversion.ads:10:51-10:57>
<PragmaNodeList unchecked_conversion.ads:12:1-14:49>
<PragmaNode unchecked_conversion.ads:12:1-12:55>
<Id "No_Elaboration_Code_All" unchecked_conversion.ads:12:8-12:31>
<BaseAssocList unchecked_conversion.ads:12:33-12:53>
<PragmaArgumentAssoc unchecked_conversion.ads:12:33-12:53>
<Id "Unchecked_Conversion" unchecked_conversion.ads:12:33-12:53>
<PragmaNode unchecked_conversion.ads:13:1-13:36>
<Id "Pure" unchecked_conversion.ads:13:8-13:12>
<BaseAssocList unchecked_conversion.ads:13:14-13:34>
<PragmaArgumentAssoc unchecked_conversion.ads:13:14-13:34>
<Id "Unchecked_Conversion" unchecked_conversion.ads:13:14-13:34>
<PragmaNode unchecked_conversion.ads:14:1-14:49>
<Id "Import" unchecked_conversion.ads:14:8-14:14>
<BaseAssocList unchecked_conversion.ads:14:16-14:47>
<PragmaArgumentAssoc unchecked_conversion.ads:14:16-14:25>
<Id "Intrinsic" unchecked_conversion.ads:14:16-14:25>
<PragmaArgumentAssoc unchecked_conversion.ads:14:27-14:47>
<Id "Unchecked_Conversion" unchecked_conversion.ads:14:27-14:47>
